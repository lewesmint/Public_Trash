version: '3'

vars:
  NAMESPACE: nevada
  REGISTRY_IP: "192.168.1.2:5000"
  SERVICES: >
    aircraft-engine-service
    clown-service
    huzzah-service
    value-added-service
tasks:
  default:
    desc: "Show available Nevada Services Code tasks"
    cmds:
      - task --list

  # 01-build-all:
  #   desc: "01: Build and push container images (Jib runs automatically)"
  #   cmds:
  #     - echo "Building and pushing container images..."
  #     - |
  #      echo "Registry: {{.REGISTRY_IP}} (Jib configured in POM)"
  #     - mvn clean install -DskipTests
  #     - echo "All container images built and pushed successfully"

  05-setup-registry-access:
    desc: "05: Setup minikube to access the registry"
    cmds:
      - echo "Registry access is configured via minikube --insecure-registry flag"
      - echo "Minikube should be started with insecure-registry={{.REGISTRY_IP}}"
      - echo "Deployment files should use IP address {{.REGISTRY_IP}}/{{.NAMESPACE}}/service-name:tag"
      - echo "Registry access setup completed"

  06-deploy-all:
    desc: "06: Deploy all services to Kubernetes"
    deps: [05-setup-registry-access]
    cmds:
      - echo "Deploying all services to Kubernetes..."
      - |
        # Convert services to bash array
        readarray -t SERVICES_ARRAY <<< "{{.SERVICES}}"
        for service in "${SERVICES_ARRAY[@]}"; do
          # Skip empty lines
          [[ -z "$service" ]] && continue
          echo "Deploying $service..."
          cd $service
          if [ -f k8s/deployment.yaml ]; then
            kubectl apply -f k8s/deployment.yaml
          else
            echo "WARNING: No k8s/deployment.yaml found for $service"
          fi
          cd ..
        done
      - echo "Waiting for all deployments to be ready..."
      - |
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          echo "Waiting for $service deployment..."
          kubectl wait --for=condition=available --timeout=300s deployment/$service -n {{.NAMESPACE}} || echo "WARNING: $service deployment timeout"
        done
      - echo "All services deployed successfully"

  07-build-and-deploy-all:
    desc: "07: Complete build and deploy process for all services"
    cmds:
      - echo "Building and deploying all Nevada services..."
      - task: 06-deploy-all
      - task: 10-status-all
      - task: 11-endpoints-all

  10-status-all:
    desc: "10: Show status of all services"
    cmds:
      - echo "Nevada Services Status:"
      - kubectl get pods -n {{.NAMESPACE}} -l app.kubernetes.io/part-of=nevada-services
      - echo ""
      - kubectl get svc -n {{.NAMESPACE}} -l app.kubernetes.io/part-of=nevada-services

  11-endpoints-all:
    desc: "11: Show endpoints for all services"
    cmds:
      - echo "Nevada Services Endpoints:"
      - |
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          service_name=$(echo $service | sed 's/-service$//')
          echo "  - $service:"
          echo "    - Health: http://minikube/services/$service_name/$service/health"
          echo "    - API: http://minikube/services/$service_name/$service"
          echo "    - Swagger: http://minikube/services/$service_name/swagger-ui"
        done

  12-test-all:
    desc: "12: Test all service health endpoints"
    cmds:
      - echo "Testing all service health endpoints..."
      - |
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          service_name=$(echo $service | sed 's/-service$//')
          echo "Testing $service health endpoint..."
          curl -f http://minikube/services/$service_name/$service/health || echo "ERROR: $service health check failed"
        done
      - echo "Health checks completed"

  13-start-registry:
    desc: "13: Start local Docker registry"
    cmds:
      - echo "Starting local Docker registry on {{.REGISTRY_IP}}..."
      - |
        # Check if registry is already running
        if curl -s http://{{.REGISTRY_IP}}/v2/ >/dev/null 2>&1; then
          echo "Registry already running at {{.REGISTRY_IP}}"
        else
          echo "Starting new registry container..."
          docker run -d -p 5000:5000 --name registry \
            --restart=always \
            -v registry-data:/var/lib/registry \
            registry:2

          # Wait for registry to be ready
          echo "Waiting for registry to be ready..."
          for i in {1..10}; do
            if curl -s http://{{.REGISTRY_IP}}/v2/ >/dev/null 2>&1; then
              echo "Registry is ready!"
              break
            fi
            echo "Waiting... ($i/10)"
            sleep 2
          done
        fi

  14-check-registry:
    desc: "14: List all images (repo:tag) in the registry"
    cmds:
      - echo "Checking registry contents at {{.REGISTRY_IP}}..."
      - |
        PROTO="http"                     # or https
        REG="{{.REGISTRY_IP}}"           # host[:port]
        AUTH=""                          # e.g. -u user:pass if needed

        # Grab all repositories
        repos=$(curl -fsS $AUTH "$PROTO://$REG/v2/_catalog?n=1000" | jq -r '.repositories[]?' || true)

        if [ -z "$repos" ]; then
          echo "No repositories found (catalog disabled or empty)"
          exit 0
        fi

        echo "=== IMAGE REFERENCES (registry/repo:tag) WITH TIMESTAMPS ==="
        for repo in $repos; do
          tags=$(curl -fsS $AUTH "$PROTO://$REG/v2/$repo/tags/list" | jq -r '.tags[]?' || true)
          if [ -z "$tags" ]; then
            echo "$REG/$repo: <no tags>"
          else
            for tag in $tags; do
              # Get timestamp from manifest
              timestamp=$(curl -fsS -I $AUTH "$PROTO://$REG/v2/$repo/manifests/$tag" \
                -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                | grep -i "^date:" | cut -d' ' -f2- | tr -d '\r' || echo "unknown")

              if [ "$timestamp" != "unknown" ] && [ -n "$timestamp" ]; then
                echo "$REG/$repo:$tag (pushed: $timestamp)"
              else
                echo "$REG/$repo:$tag"
              fi
            done
          fi
        done

  15-registry-status:
    desc: "15: Show registry status for all Nevada services"
    cmds:
      - echo "=== REGISTRY STATUS FOR NEVADA SERVICES ==="
      - |
        # Check if registry is running
        if curl -s http://{{.REGISTRY_IP}}/v2/ >/dev/null 2>&1; then
          echo "✓ Registry: Running at {{.REGISTRY_IP}}"
        else
          echo "✗ Registry: Not running at {{.REGISTRY_IP}}"
          echo "  Run 'task 13-start-registry' to start it"
          exit 1
        fi
        echo ""

        echo "=== SERVICE IMAGE STATUS WITH TIMESTAMPS ==="

        # Get all repositories from catalog
        PROTO="http"
        REG="{{.REGISTRY_IP}}"
        AUTH=""
        repos=$(curl -fsS $AUTH "$PROTO://$REG/v2/_catalog?n=1000" | jq -r '.repositories[]?' || true)

        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          echo -n "$service: "

          # Find matching repository in catalog (could be service-name or namespace/service-name)
          matching_repo=""
          for repo in $repos; do
            if [[ "$repo" == "$service" ]] || [[ "$repo" == *"/$service" ]]; then
              matching_repo="$repo"
              break
            fi
          done

          if [ -n "$matching_repo" ]; then
            # Get tags for the actual repository path
            tags=$(curl -fsS $AUTH "$PROTO://$REG/v2/$matching_repo/tags/list" | jq -r '.tags[]?' || true)
            if [ -n "$tags" ]; then
              echo "✓ Available tags: $tags"
              echo "    Repository: $REG/$matching_repo"

              # Get timestamp for each tag
              for tag in $tags; do
                timestamp=$(curl -fsS -I $AUTH "$PROTO://$REG/v2/$matching_repo/manifests/$tag" \
                  -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                  | grep -i "^date:" | cut -d' ' -f2- | tr -d '\r' || echo "unknown")

                if [ "$timestamp" != "unknown" ] && [ -n "$timestamp" ]; then
                  echo "    └─ $tag: Pushed $timestamp"
                else
                  echo "    └─ $tag: Timestamp unavailable"
                fi
              done
            else
              echo "✗ Repository exists but no tags found"
            fi
          else
            echo "✗ No repository found (not built yet)"
          fi
          echo ""
        done
        echo ""

        echo "=== KUBERNETES DEPLOYMENT STATUS ==="
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          echo -n "$service: "
          if kubectl get deployment $service -n {{.NAMESPACE}} >/dev/null 2>&1; then
            status=$(kubectl get deployment $service -n {{.NAMESPACE}} -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null)
            image=$(kubectl get deployment $service -n {{.NAMESPACE}} -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null)
            echo "✓ Deployed ($status ready) - Image: $image"
          else
            echo "✗ Not deployed"
          fi
        done

  16-verify-image-availability:
    desc: "16: Verify that Kubernetes deployment images exist in registry"
    cmds:
      - echo "=== VERIFYING IMAGE AVAILABILITY ==="
      - |
        PROTO="http"
        REG="{{.REGISTRY_IP}}"
        AUTH=""

        # Process each service
        for service in $(echo "{{.SERVICES}}" | tr '\n' ' '); do
          # Skip empty services
          [[ -z "$service" ]] && continue

          echo "Checking $service..."

          # Get the image that Kubernetes is trying to use
          if kubectl get deployment $service -n {{.NAMESPACE}} >/dev/null 2>&1; then
            k8s_image=$(kubectl get deployment $service -n {{.NAMESPACE}} -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null)
            echo "  K8s expects: $k8s_image"

            # Parse the image reference (registry/repo:tag)
            if [[ "$k8s_image" =~ ^([^/]+)/(.+):(.+)$ ]]; then
              registry_part="${BASH_REMATCH[1]}"
              repo_part="${BASH_REMATCH[2]}"
              tag_part="${BASH_REMATCH[3]}"

              echo "  Registry: $registry_part"
              echo "  Repository: $repo_part"
              echo "  Tag: $tag_part"

              # Check if this exact image exists in registry
              if curl -fsS $AUTH "$PROTO://$REG/v2/$repo_part/manifests/$tag_part" \
                -H "Accept: application/vnd.docker.distribution.manifest.v2+json" >/dev/null 2>&1; then
                echo "  SUCCESS: Image EXISTS in registry"
              else
                echo "  ERROR: Image NOT FOUND in registry"
                echo "  Available tags for $repo_part:"
                available_tags=$(curl -fsS $AUTH "$PROTO://$REG/v2/$repo_part/tags/list" 2>/dev/null | jq -r '.tags[]?' 2>/dev/null || echo "none")
                if [ "$available_tags" != "none" ]; then
                  for tag in $available_tags; do
                    echo "     - $REG/$repo_part:$tag"
                  done
                else
                  echo "     - No tags found for repository $repo_part"
                fi
              fi
            else
              echo "  WARNING: Could not parse image reference: $k8s_image"
            fi
          else
            echo "  WARNING: Deployment not found in Kubernetes"
          fi
          echo ""
        done

  20-restart-all:
    desc: "20: Restart all services"
    cmds:
      - echo "Restarting all Nevada services..."
      - |
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          echo "Restarting $service..."
          kubectl rollout restart deployment/$service -n {{.NAMESPACE}}
        done
      - |
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          echo "Waiting for $service restart..."
          kubectl rollout status deployment/$service -n {{.NAMESPACE}}
        done
      - echo "All services restarted successfully"

  16-stop-registry:
    desc: "16: Stop and remove local Docker registry"
    cmds:
      - echo "Stopping local Docker registry..."
      - |
        if docker ps | grep -q "registry"; then
          echo "Stopping registry container..."
          docker stop registry
          docker rm registry
          echo "Registry stopped and removed"
        else
          echo "Registry container not running"
        fi

  17-reset-registry:
    desc: "17: Reset registry (stop, remove, restart fresh)"
    cmds:
      - echo "Resetting Docker registry..."
      - task: 16-stop-registry
      - |
        echo "Removing registry data volume..."
        docker volume rm registry-data 2>/dev/null || echo "Registry data volume not found"
      - task: 13-start-registry
      - echo "Registry reset completed - fresh empty registry running"

  18-clean-registry:
    desc: "18: Clean registry with before/after status"
    cmds:
      - echo "Cleaning registry - restarting with fresh data..."
      - |
        echo "=== BEFORE CLEANUP ==="
        if curl -s http://{{.REGISTRY_IP}}/v2/ >/dev/null 2>&1; then
          curl -s http://{{.REGISTRY_IP}}/v2/_catalog | jq -r '.repositories[]?' 2>/dev/null || curl -s http://{{.REGISTRY_IP}}/v2/_catalog
        else
          echo "Registry not running"
        fi
        echo ""
      - task: 17-reset-registry
      - |
        echo ""
        echo "=== AFTER CLEANUP ==="
        curl -s http://{{.REGISTRY_IP}}/v2/_catalog | jq -r '.repositories[]?' 2>/dev/null || curl -s http://{{.REGISTRY_IP}}/v2/_catalog
        echo ""
        echo "Registry cleaned - all images removed"

  90-clean-all:
    desc: "90: Clean up all deployments and local artifacts"
    cmds:
      - echo "Cleaning up all Nevada services..."
      - |
        for service in $(echo "{{.SERVICES}}" | tr ',' ' '); do
          echo "Cleaning $service..."
          cd $service
          if [ -f k8s/deployment.yaml ]; then
            kubectl delete -f k8s/deployment.yaml --ignore-not-found=true
          fi
          cd ..
        done
      - mvn clean || true
      - echo "Cleanup completed"

  # Individual service tasks (no numbering - utility tasks)
  logs:
    desc: "Show logs for a specific service (usage: task logs SERVICE=<service-name> [FOLLOW=true])"
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "ERROR: SERVICE parameter required."
          echo "Available services: $(echo "{{.SERVICES}}" | tr '\n' ', ' | sed 's/, $//')"
          echo "Usage: task logs SERVICE=<service-name> [FOLLOW=true]"
          echo "  FOLLOW=true  - Stream logs continuously (Ctrl+C to stop)"
          echo "  FOLLOW=false - Show recent logs and exit (default)"
          exit 1
        fi

        if [ "{{.FOLLOW}}" = "true" ]; then
          echo "Streaming logs for {{.SERVICE}} (Ctrl+C to stop)..."
          kubectl logs -f deployment/{{.SERVICE}} -n {{.NAMESPACE}}
        else
          echo "Recent logs for {{.SERVICE}}:"
          kubectl logs deployment/{{.SERVICE}} -n {{.NAMESPACE}} --tail=50
        fi

  restart:
    desc: "Restart a specific service (usage: task restart SERVICE=<service-name>)"
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "ERROR: SERVICE parameter required."
          echo "Available services: $(echo "{{.SERVICES}}" | tr '\n' ', ' | sed 's/, $//')"
          echo "Usage: task restart SERVICE=<service-name>"
          exit 1
        fi
      - echo "Restarting {{.SERVICE}}..."
      - kubectl rollout restart deployment/{{.SERVICE}} -n {{.NAMESPACE}}
      - kubectl rollout status deployment/{{.SERVICE}} -n {{.NAMESPACE}}
      - echo "{{.SERVICE}} restarted successfully"

  dev:
    desc: "Run a specific service in development mode (usage: task dev SERVICE=aircraft-engine-service)"
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "ERROR: SERVICE parameter required. Usage: task dev SERVICE=aircraft-engine-service"
          exit 1
        fi
      - echo "Starting {{.SERVICE}} in development mode..."
      - cd {{.SERVICE}} && ./mvnw compile quarkus:dev
