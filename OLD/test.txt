#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdio.h>

#pragma comment(lib, "ws2_32.lib")  // Link against Winsock library

int main() {
    WSADATA wsa;
    WSAStartup(MAKEWORD(2, 2), &wsa);

    SOCKET sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == INVALID_SOCKET) {
        printf("Socket creation failed: %d\n", WSAGetLastError());
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);

    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        printf("Connect failed: %d\n", WSAGetLastError());
        closesocket(sockfd);
        WSACleanup();
        return 1;
    }

    // âœ… Initialize `select()` structures
    fd_set read_fds;
    FD_ZERO(&read_fds);
    FD_SET(sockfd, &read_fds);

    struct timeval timeout;
    timeout.tv_sec = 5;   // 5-second timeout
    timeout.tv_usec = 0;  // 0 microseconds

    printf("Waiting for data...\n");

    int ret = select(0, &read_fds, NULL, NULL, &timeout);
    if (ret == 0) {
        printf("Timeout: No data received within 5 seconds\n");
    } else if (ret > 0) {
        // Data is available, call recv()
        char buffer[1024];
        int bytes_received = recv(sockfd, buffer, sizeof(buffer) - 1, 0);
        if (bytes_received > 0) {
            buffer[bytes_received] = '\0';
            printf("Received: %s\n", buffer);
        } else if (bytes_received == 0) {
            printf("Connection closed by peer\n");
        } else {
            printf("recv failed: %d\n", WSAGetLastError());
        }
    } else {
        printf("select failed: %d\n", WSAGetLastError());
    }

    closesocket(sockfd);
    WSACleanup();
    return 0;
}
